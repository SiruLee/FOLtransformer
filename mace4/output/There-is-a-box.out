============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 16904 was started by root on JLZenbook,
Wed Aug 21 12:08:15 2024
The command was "./mace4/mace4 -n 2 -s 60 -b -1 -N -1 -n 2 -i 1 -m 3 -t 60 -P 1 -p 0 -f ./mace4/input/temp-input.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file ./mace4/input/temp-input.in

if(Mace4).
% Conditional input included.
assign(max_megs,-1).
end_if.

formulas(assumptions).
(exists x (is_box(x) & with_center(x) & with_radius(x))).
(all x (solid(x) | curve(x) | hole(x) | joint(x))).
(all x (solid(x) -> -curve(x) & -hole(x) & -joint(x))).
(all x (curve(x) -> -hole(x) & -joint(x))).
(all x (hole(x) -> -joint(x))).
(all x (solid(x) | curve(x) -> on_xy(x) | on_yz(x) | on_zx(x))).
(all x (on_xy(x) -> -on_yz(x) & -on_zx(x))).
(all x (on_yz(x) -> -on_xy(x) & -on_zx(x))).
(all x (on_zx(x) -> -on_xy(x) & -on_yz(x))).
(all x (curve(x) <-> is_arc(x) | is_circle(x) | is_ellipse(x) | is_line(x))).
(all x (is_arc(x) -> -is_circle(x) & is_ellipse(x) & is_line(x))).
(all x (is_circle(x) -> is_ellipse(x) & is_line(x))).
(all x (is_ellipse(x) -> is_line(x))).
(all x (is_arc(x) -> with_center(x) & with_start(x) & with_end(x))).
(all x (is_circle(x) -> with_center(x) & with_radius(x))).
(all x (is_ellipse(x) -> with_center(x) & with_major(x) & with_point(x))).
(all x (is_line(x) -> with_start(x) & with_end(x))).
(all x (solid(x) <-> is_box(x) | is_cylinder(x) | is_sphere(x) | is_torus(x) | is_coil(x) | is_pipe(x))).
(all x (is_box(x) -> -is_cylinder(x) & -is_sphere(x) & -is_torus(x) & -is_coil(x) & -is_pipe(x))).
(all x (is_cylinder(x) -> -is_sphere(x) & -is_torus(x) & -is_coil(x) & -is_pipe(x))).
(all x (is_sphere(x) -> -is_torus(x) & -is_coil(x) & -is_pipe(x))).
(all x (is_torus(x) -> -is_coil(x) & -is_pipe(x))).
(all x (is_coil(x) -> -is_pipe(x))).
(all x all y (solid(x) & has_hole(x,y) -> hole(y))).
(all x (is_box(x) -> with_length(x) & with_height(x) & with_width(x))).
(all x (is_cylinder(x) -> with_diameter(x) & with_height(x))).
(all x (is_sphere(x) -> with_diameter(x))).
(all x (is_torus(x) -> with_major(x) & with_minor(x))).
(all x (is_coil(x) -> with_diameter(x) & with_revol(x) & with_height(x) & with_angle(x) & with_section_size(x))).
(all x (is_pipe(x) -> with_diameter(x) & (exists y (curve(y) & pipe_drawn_on(x,y))))).
(all x all y (pipe_drawn_on(x,y) -> is_pipe(x) & curve(y))).
(all x (hole(x) -> is_simple(x) | is_counterbore(x) | is_countersink(x))).
(all x (is_simple(x) -> with_diameter(x))).
(all x (is_counterbore(x) -> with_diameter(x) & with_counterbore_diameter(x) & with_counterbore_depth(x))).
(all x (is_countersink(x) -> with_diameter(x) & with_countersink_diameter(x) & with_countersink_angle(x))).
(all x (joint(x) -> is_rigid(x) | is_revolute(x) | is_slider(x) | is_cylindrical(x) | is_pinslot(x) | is_planer(x) | is_ball(x))).
(all x (joint(x) -> (exists y exists z (is_joined_by(y,z,x) & x != y & x != z & y != z)))).
(all x all y all z (is_joined_by(x,y,z) -> x != y & x != z & y != z & solid(x) & solid(y) & joint(z) & is_joined(x,y))).
end_of_list.

formulas(goals).
end_of_list.
    % assign(domain_size, 2) -> assign(start_size, 2).
    % assign(domain_size, 2) -> assign(end_size, 2).

% From the command line: assign(domain_size, 2).

% From the command line: assign(max_seconds_per, 60).

% From the command line: assign(max_megs, -1).

% From the command line: assign(end_size, -1).
    % assign(domain_size, 2) -> assign(start_size, 2).
    % assign(domain_size, 2) -> assign(end_size, 2).

% From the command line: assign(domain_size, 2).

% From the command line: assign(increment, 1).

% From the command line: assign(max_models, 3).

% From the command line: assign(max_seconds, 60).
    % set(print_models) -> clear(print_models_tabular).

% From the command line: set(print_models).

% From the command line: clear(print_models_tabular).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (exists x (is_box(x) & with_center(x) & with_radius(x))) # label(non_clause).  [assumption].
2 (all x (solid(x) | curve(x) | hole(x) | joint(x))) # label(non_clause).  [assumption].
3 (all x (solid(x) -> -curve(x) & -hole(x) & -joint(x))) # label(non_clause).  [assumption].
4 (all x (curve(x) -> -hole(x) & -joint(x))) # label(non_clause).  [assumption].
5 (all x (hole(x) -> -joint(x))) # label(non_clause).  [assumption].
6 (all x (solid(x) | curve(x) -> on_xy(x) | on_yz(x) | on_zx(x))) # label(non_clause).  [assumption].
7 (all x (on_xy(x) -> -on_yz(x) & -on_zx(x))) # label(non_clause).  [assumption].
8 (all x (on_yz(x) -> -on_xy(x) & -on_zx(x))) # label(non_clause).  [assumption].
9 (all x (on_zx(x) -> -on_xy(x) & -on_yz(x))) # label(non_clause).  [assumption].
10 (all x (curve(x) <-> is_arc(x) | is_circle(x) | is_ellipse(x) | is_line(x))) # label(non_clause).  [assumption].
11 (all x (is_arc(x) -> -is_circle(x) & is_ellipse(x) & is_line(x))) # label(non_clause).  [assumption].
12 (all x (is_circle(x) -> is_ellipse(x) & is_line(x))) # label(non_clause).  [assumption].
13 (all x (is_ellipse(x) -> is_line(x))) # label(non_clause).  [assumption].
14 (all x (is_arc(x) -> with_center(x) & with_start(x) & with_end(x))) # label(non_clause).  [assumption].
15 (all x (is_circle(x) -> with_center(x) & with_radius(x))) # label(non_clause).  [assumption].
16 (all x (is_ellipse(x) -> with_center(x) & with_major(x) & with_point(x))) # label(non_clause).  [assumption].
17 (all x (is_line(x) -> with_start(x) & with_end(x))) # label(non_clause).  [assumption].
18 (all x (solid(x) <-> is_box(x) | is_cylinder(x) | is_sphere(x) | is_torus(x) | is_coil(x) | is_pipe(x))) # label(non_clause).  [assumption].
19 (all x (is_box(x) -> -is_cylinder(x) & -is_sphere(x) & -is_torus(x) & -is_coil(x) & -is_pipe(x))) # label(non_clause).  [assumption].
20 (all x (is_cylinder(x) -> -is_sphere(x) & -is_torus(x) & -is_coil(x) & -is_pipe(x))) # label(non_clause).  [assumption].
21 (all x (is_sphere(x) -> -is_torus(x) & -is_coil(x) & -is_pipe(x))) # label(non_clause).  [assumption].
22 (all x (is_torus(x) -> -is_coil(x) & -is_pipe(x))) # label(non_clause).  [assumption].
23 (all x (is_coil(x) -> -is_pipe(x))) # label(non_clause).  [assumption].
24 (all x all y (solid(x) & has_hole(x,y) -> hole(y))) # label(non_clause).  [assumption].
25 (all x (is_box(x) -> with_length(x) & with_height(x) & with_width(x))) # label(non_clause).  [assumption].
26 (all x (is_cylinder(x) -> with_diameter(x) & with_height(x))) # label(non_clause).  [assumption].
27 (all x (is_sphere(x) -> with_diameter(x))) # label(non_clause).  [assumption].
28 (all x (is_torus(x) -> with_major(x) & with_minor(x))) # label(non_clause).  [assumption].
29 (all x (is_coil(x) -> with_diameter(x) & with_revol(x) & with_height(x) & with_angle(x) & with_section_size(x))) # label(non_clause).  [assumption].
30 (all x (is_pipe(x) -> with_diameter(x) & (exists y (curve(y) & pipe_drawn_on(x,y))))) # label(non_clause).  [assumption].
31 (all x all y (pipe_drawn_on(x,y) -> is_pipe(x) & curve(y))) # label(non_clause).  [assumption].
32 (all x (hole(x) -> is_simple(x) | is_counterbore(x) | is_countersink(x))) # label(non_clause).  [assumption].
33 (all x (is_simple(x) -> with_diameter(x))) # label(non_clause).  [assumption].
34 (all x (is_counterbore(x) -> with_diameter(x) & with_counterbore_diameter(x) & with_counterbore_depth(x))) # label(non_clause).  [assumption].
35 (all x (is_countersink(x) -> with_diameter(x) & with_countersink_diameter(x) & with_countersink_angle(x))) # label(non_clause).  [assumption].
36 (all x (joint(x) -> is_rigid(x) | is_revolute(x) | is_slider(x) | is_cylindrical(x) | is_pinslot(x) | is_planer(x) | is_ball(x))) # label(non_clause).  [assumption].
37 (all x (joint(x) -> (exists y exists z (is_joined_by(y,z,x) & x != y & x != z & y != z)))) # label(non_clause).  [assumption].
38 (all x all y all z (is_joined_by(x,y,z) -> x != y & x != z & y != z & solid(x) & solid(y) & joint(z) & is_joined(x,y))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
is_box(c1).
with_center(c1).
with_radius(c1).
solid(x) | curve(x) | hole(x) | joint(x).
-solid(x) | -curve(x).
-solid(x) | -hole(x).
-solid(x) | -joint(x).
-curve(x) | -hole(x).
-curve(x) | -joint(x).
-hole(x) | -joint(x).
-solid(x) | on_xy(x) | on_yz(x) | on_zx(x).
-curve(x) | on_xy(x) | on_yz(x) | on_zx(x).
-on_xy(x) | -on_yz(x).
-on_xy(x) | -on_zx(x).
-on_yz(x) | -on_xy(x).
-on_yz(x) | -on_zx(x).
-on_zx(x) | -on_xy(x).
-on_zx(x) | -on_yz(x).
-curve(x) | is_arc(x) | is_circle(x) | is_ellipse(x) | is_line(x).
curve(x) | -is_arc(x).
curve(x) | -is_circle(x).
curve(x) | -is_ellipse(x).
curve(x) | -is_line(x).
-is_arc(x) | -is_circle(x).
-is_arc(x) | is_ellipse(x).
-is_arc(x) | is_line(x).
-is_circle(x) | is_ellipse(x).
-is_circle(x) | is_line(x).
-is_ellipse(x) | is_line(x).
-is_arc(x) | with_center(x).
-is_arc(x) | with_start(x).
-is_arc(x) | with_end(x).
-is_circle(x) | with_center(x).
-is_circle(x) | with_radius(x).
-is_ellipse(x) | with_center(x).
-is_ellipse(x) | with_major(x).
-is_ellipse(x) | with_point(x).
-is_line(x) | with_start(x).
-is_line(x) | with_end(x).
-solid(x) | is_box(x) | is_cylinder(x) | is_sphere(x) | is_torus(x) | is_coil(x) | is_pipe(x).
solid(x) | -is_box(x).
solid(x) | -is_cylinder(x).
solid(x) | -is_sphere(x).
solid(x) | -is_torus(x).
solid(x) | -is_coil(x).
solid(x) | -is_pipe(x).
-is_box(x) | -is_cylinder(x).
-is_box(x) | -is_sphere(x).
-is_box(x) | -is_torus(x).
-is_box(x) | -is_coil(x).
-is_box(x) | -is_pipe(x).
-is_cylinder(x) | -is_sphere(x).
-is_cylinder(x) | -is_torus(x).
-is_cylinder(x) | -is_coil(x).
-is_cylinder(x) | -is_pipe(x).
-is_sphere(x) | -is_torus(x).
-is_sphere(x) | -is_coil(x).
-is_sphere(x) | -is_pipe(x).
-is_torus(x) | -is_coil(x).
-is_torus(x) | -is_pipe(x).
-is_coil(x) | -is_pipe(x).
-solid(x) | -has_hole(x,y) | hole(y).
-is_box(x) | with_length(x).
-is_box(x) | with_height(x).
-is_box(x) | with_width(x).
-is_cylinder(x) | with_diameter(x).
-is_cylinder(x) | with_height(x).
-is_sphere(x) | with_diameter(x).
-is_torus(x) | with_major(x).
-is_torus(x) | with_minor(x).
-is_coil(x) | with_diameter(x).
-is_coil(x) | with_revol(x).
-is_coil(x) | with_height(x).
-is_coil(x) | with_angle(x).
-is_coil(x) | with_section_size(x).
-is_pipe(x) | with_diameter(x).
-is_pipe(x) | curve(f1(x)).
-is_pipe(x) | pipe_drawn_on(x,f1(x)).
-pipe_drawn_on(x,y) | is_pipe(x).
-pipe_drawn_on(x,y) | curve(y).
-hole(x) | is_simple(x) | is_counterbore(x) | is_countersink(x).
-is_simple(x) | with_diameter(x).
-is_counterbore(x) | with_diameter(x).
-is_counterbore(x) | with_counterbore_diameter(x).
-is_counterbore(x) | with_counterbore_depth(x).
-is_countersink(x) | with_diameter(x).
-is_countersink(x) | with_countersink_diameter(x).
-is_countersink(x) | with_countersink_angle(x).
-joint(x) | is_rigid(x) | is_revolute(x) | is_slider(x) | is_cylindrical(x) | is_pinslot(x) | is_planer(x) | is_ball(x).
-joint(x) | is_joined_by(f2(x),f3(x),x).
-joint(x) | f2(x) != x.
-joint(x) | f3(x) != x.
-joint(x) | f3(x) != f2(x).
-is_joined_by(x,y,z) | y != x.
-is_joined_by(x,y,z) | z != x.
-is_joined_by(x,y,z) | z != y.
-is_joined_by(x,y,z) | solid(x).
-is_joined_by(x,y,z) | solid(y).
-is_joined_by(x,y,z) | joint(z).
-is_joined_by(x,y,z) | is_joined(x,y).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(c1, [ 0 ]),

        function(f1(_), [ 0, 0 ]),

        function(f2(_), [ 0, 0 ]),

        function(f3(_), [ 0, 0 ]),

        relation(curve(_), [ 0, 0 ]),

        relation(hole(_), [ 0, 0 ]),

        relation(is_arc(_), [ 0, 0 ]),

        relation(is_ball(_), [ 0, 0 ]),

        relation(is_box(_), [ 1, 0 ]),

        relation(is_circle(_), [ 0, 0 ]),

        relation(is_coil(_), [ 0, 0 ]),

        relation(is_counterbore(_), [ 0, 0 ]),

        relation(is_countersink(_), [ 0, 0 ]),

        relation(is_cylinder(_), [ 0, 0 ]),

        relation(is_cylindrical(_), [ 0, 0 ]),

        relation(is_ellipse(_), [ 0, 0 ]),

        relation(is_line(_), [ 0, 0 ]),

        relation(is_pinslot(_), [ 0, 0 ]),

        relation(is_pipe(_), [ 0, 0 ]),

        relation(is_planer(_), [ 0, 0 ]),

        relation(is_revolute(_), [ 0, 0 ]),

        relation(is_rigid(_), [ 0, 0 ]),

        relation(is_simple(_), [ 0, 0 ]),

        relation(is_slider(_), [ 0, 0 ]),

        relation(is_sphere(_), [ 0, 0 ]),

        relation(is_torus(_), [ 0, 1 ]),

        relation(joint(_), [ 0, 0 ]),

        relation(on_xy(_), [ 0, 0 ]),

        relation(on_yz(_), [ 0, 0 ]),

        relation(on_zx(_), [ 1, 1 ]),

        relation(solid(_), [ 1, 1 ]),

        relation(with_angle(_), [ 0, 0 ]),

        relation(with_center(_), [ 1, 0 ]),

        relation(with_counterbore_depth(_), [ 0, 0 ]),

        relation(with_counterbore_diameter(_), [ 0, 0 ]),

        relation(with_countersink_angle(_), [ 0, 0 ]),

        relation(with_countersink_diameter(_), [ 0, 0 ]),

        relation(with_diameter(_), [ 0, 0 ]),

        relation(with_end(_), [ 0, 0 ]),

        relation(with_height(_), [ 1, 0 ]),

        relation(with_length(_), [ 1, 0 ]),

        relation(with_major(_), [ 0, 1 ]),

        relation(with_minor(_), [ 0, 1 ]),

        relation(with_point(_), [ 0, 0 ]),

        relation(with_radius(_), [ 1, 0 ]),

        relation(with_revol(_), [ 0, 0 ]),

        relation(with_section_size(_), [ 0, 0 ]),

        relation(with_start(_), [ 0, 0 ]),

        relation(with_width(_), [ 1, 0 ]),

        relation(has_hole(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(is_joined(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(pipe_drawn_on(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(is_joined_by(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ])
]).

============================== end of model ==========================

============================== MODEL =================================

interpretation( 2, [number=2, seconds=0], [

        function(c1, [ 0 ]),

        function(f1(_), [ 0, 0 ]),

        function(f2(_), [ 0, 0 ]),

        function(f3(_), [ 0, 0 ]),

        relation(curve(_), [ 0, 0 ]),

        relation(hole(_), [ 0, 0 ]),

        relation(is_arc(_), [ 0, 0 ]),

        relation(is_ball(_), [ 0, 0 ]),

        relation(is_box(_), [ 1, 0 ]),

        relation(is_circle(_), [ 0, 0 ]),

        relation(is_coil(_), [ 0, 0 ]),

        relation(is_counterbore(_), [ 0, 0 ]),

        relation(is_countersink(_), [ 0, 0 ]),

        relation(is_cylinder(_), [ 0, 0 ]),

        relation(is_cylindrical(_), [ 0, 0 ]),

        relation(is_ellipse(_), [ 0, 0 ]),

        relation(is_line(_), [ 0, 0 ]),

        relation(is_pinslot(_), [ 0, 0 ]),

        relation(is_pipe(_), [ 0, 0 ]),

        relation(is_planer(_), [ 0, 0 ]),

        relation(is_revolute(_), [ 0, 0 ]),

        relation(is_rigid(_), [ 0, 0 ]),

        relation(is_simple(_), [ 0, 0 ]),

        relation(is_slider(_), [ 0, 0 ]),

        relation(is_sphere(_), [ 0, 0 ]),

        relation(is_torus(_), [ 0, 1 ]),

        relation(joint(_), [ 0, 0 ]),

        relation(on_xy(_), [ 0, 0 ]),

        relation(on_yz(_), [ 0, 0 ]),

        relation(on_zx(_), [ 1, 1 ]),

        relation(solid(_), [ 1, 1 ]),

        relation(with_angle(_), [ 0, 0 ]),

        relation(with_center(_), [ 1, 0 ]),

        relation(with_counterbore_depth(_), [ 0, 0 ]),

        relation(with_counterbore_diameter(_), [ 0, 0 ]),

        relation(with_countersink_angle(_), [ 0, 0 ]),

        relation(with_countersink_diameter(_), [ 0, 0 ]),

        relation(with_diameter(_), [ 0, 0 ]),

        relation(with_end(_), [ 0, 0 ]),

        relation(with_height(_), [ 1, 0 ]),

        relation(with_length(_), [ 1, 0 ]),

        relation(with_major(_), [ 0, 1 ]),

        relation(with_minor(_), [ 0, 1 ]),

        relation(with_point(_), [ 0, 0 ]),

        relation(with_radius(_), [ 1, 0 ]),

        relation(with_revol(_), [ 0, 0 ]),

        relation(with_section_size(_), [ 0, 0 ]),

        relation(with_start(_), [ 0, 0 ]),

        relation(with_width(_), [ 1, 0 ]),

        relation(has_hole(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(is_joined(_,_), [
			   0, 0,
			   0, 1 ]),

        relation(pipe_drawn_on(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(is_joined_by(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ])
]).

============================== end of model ==========================

============================== MODEL =================================

interpretation( 2, [number=3, seconds=0], [

        function(c1, [ 0 ]),

        function(f1(_), [ 0, 0 ]),

        function(f2(_), [ 0, 0 ]),

        function(f3(_), [ 0, 0 ]),

        relation(curve(_), [ 0, 0 ]),

        relation(hole(_), [ 0, 0 ]),

        relation(is_arc(_), [ 0, 0 ]),

        relation(is_ball(_), [ 0, 0 ]),

        relation(is_box(_), [ 1, 0 ]),

        relation(is_circle(_), [ 0, 0 ]),

        relation(is_coil(_), [ 0, 0 ]),

        relation(is_counterbore(_), [ 0, 0 ]),

        relation(is_countersink(_), [ 0, 0 ]),

        relation(is_cylinder(_), [ 0, 0 ]),

        relation(is_cylindrical(_), [ 0, 0 ]),

        relation(is_ellipse(_), [ 0, 0 ]),

        relation(is_line(_), [ 0, 0 ]),

        relation(is_pinslot(_), [ 0, 0 ]),

        relation(is_pipe(_), [ 0, 0 ]),

        relation(is_planer(_), [ 0, 0 ]),

        relation(is_revolute(_), [ 0, 0 ]),

        relation(is_rigid(_), [ 0, 0 ]),

        relation(is_simple(_), [ 0, 0 ]),

        relation(is_slider(_), [ 0, 0 ]),

        relation(is_sphere(_), [ 0, 0 ]),

        relation(is_torus(_), [ 0, 1 ]),

        relation(joint(_), [ 0, 0 ]),

        relation(on_xy(_), [ 0, 0 ]),

        relation(on_yz(_), [ 0, 0 ]),

        relation(on_zx(_), [ 1, 1 ]),

        relation(solid(_), [ 1, 1 ]),

        relation(with_angle(_), [ 0, 0 ]),

        relation(with_center(_), [ 1, 0 ]),

        relation(with_counterbore_depth(_), [ 0, 0 ]),

        relation(with_counterbore_diameter(_), [ 0, 0 ]),

        relation(with_countersink_angle(_), [ 0, 0 ]),

        relation(with_countersink_diameter(_), [ 0, 0 ]),

        relation(with_diameter(_), [ 0, 0 ]),

        relation(with_end(_), [ 0, 0 ]),

        relation(with_height(_), [ 1, 0 ]),

        relation(with_length(_), [ 1, 0 ]),

        relation(with_major(_), [ 0, 1 ]),

        relation(with_minor(_), [ 0, 1 ]),

        relation(with_point(_), [ 0, 0 ]),

        relation(with_radius(_), [ 1, 0 ]),

        relation(with_revol(_), [ 0, 0 ]),

        relation(with_section_size(_), [ 0, 0 ]),

        relation(with_start(_), [ 0, 0 ]),

        relation(with_width(_), [ 1, 0 ]),

        relation(has_hole(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(is_joined(_,_), [
			   0, 0,
			   1, 0 ]),

        relation(pipe_drawn_on(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(is_joined_by(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=245, kept=197.
Selections=71, assignments=73, propagations=47, current_models=3.
Rewrite_terms=19, rewrite_bools=250, indexes=3.
Rules_from_neg_clauses=0, cross_offs=0.

============================== end of statistics =====================

User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

Exiting with 3 models.

Process 16904 exit (max_models) Wed Aug 21 12:08:15 2024
The process finished Wed Aug 21 12:08:15 2024
